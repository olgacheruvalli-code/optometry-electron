const express = require("express");
const cors = require("cors");
const mongoose = require("mongoose");

/* ======================= Config ======================= */
const PORT = process.env.PORT || 5000;
const MONGO_URI = process.env.MONGO_URI || "mongodb://127.0.0.1:27017/optometry";

const ORIGINS_RAW = process.env.ALLOWED_ORIGINS || process.env.CORS_ORIGIN || "";
const ALLOWED_ORIGINS = ORIGINS_RAW.split(",").map(s => s.trim()).filter(Boolean);

const FISCAL_MONTHS = [
  "April","May","June","July","August","September",
  "October","November","December","January","February","March",
];
const ALL_QUESTION_KEYS = Array.from({ length: 84 }, (_, i) => `q${i + 1}`);

/* ======================= Helpers ======================= */
const _num = (v) => (Number.isFinite(Number(v)) ? Number(v) : 0);
const _answersTo84Array = (ans = {}) => ALL_QUESTION_KEYS.map((k) => _num(ans[k]));
const _sum84 = (a = [], b = []) => {
  const n = Math.max(a.length, b.length);
  const out = new Array(n).fill(0);
  for (let i = 0; i < n; i++) out[i] = _num(a[i]) + _num(b[i]);
  return out;
};
const _normalize84 = (obj = {}) => {
  const out = {};
  for (const k of ALL_QUESTION_KEYS) out[k] = _num(obj[k]);
  return out;
};
const _ensure84OnDoc = (doc) => {
  if (!doc) return doc;
  const d = { ...(doc.toObject?.() || doc) };
  d.answers = _normalize84(d.answers || {});
  const hasCum = d.cumulative && Object.keys(d.cumulative).length > 0;
  d.cumulative = hasCum ? _normalize84(d.cumulative) : { ...d.answers };
  return d;
};
const _fiscalStartYear = (m, y) => (["January","February","March"].includes(m) ? (+y - 1) : (+y));
function _fiscalWindow(toMonth, toYear) {
  const startY = _fiscalStartYear(toMonth, toYear);
  const window = [];
  for (let i = 0; i < FISCAL_MONTHS.length; i++) {
    const m = FISCAL_MONTHS[i];
    const y = i <= 8 ? startY : startY + 1; // Apr–Dec startY, Jan–Mar next year
    window.push({ month: m, year: String(y) });
    if (m === toMonth && String(y) === String(toYear)) break;
  }
  return window;
}
const escRe = (s = "") => String(s).replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
const ciEq = (field, value) => ({
  [field]: { $regex: `^${escRe(String(value).trim())}$`, $options: "i" },
});
function normalizeMonth(m = "") {
  const s = String(m).trim();
  if (!s) return s;
  const full = FISCAL_MONTHS.find((n) => n.toLowerCase() === s.toLowerCase());
  if (full) return full;
  const map = {
    jan: "January", feb: "February", mar: "March", apr: "April", may: "May",
    jun: "June", jul: "July", aug: "August", sep: "September", sept: "September",
    oct: "October", nov: "November", dec: "December",
  };
  const key = s.slice(0, 4).toLowerCase();
  return map[key] || s;
}

/* ======================= Mongoose ======================= */
const ReportSchema = new mongoose.Schema(
  {
    district: { type: String, required: true },
    institution: { type: String, required: true },
    month: { type: String, required: true, enum: FISCAL_MONTHS },
    year: { type: String, required: true },
    answers: { type: Object, default: {} },
    cumulative: { type: Object, default: {} },
    eyeBank: { type: Array, default: [] },
    visionCenter: { type: Array, default: [] },
  },
  { versionKey: false, timestamps: true }
);
ReportSchema.index({ district: 1, institution: 1, month: 1, year: 1 }, { unique: true });
const Report = mongoose.model("Report", ReportSchema);

/* ======================= Express App ======================= */
const app = express();
let dbReady = false;
const startedAt = new Date().toISOString();

// CORS
const corsOptions = {
  origin(origin, cb) {
    if (!origin) return cb(null, true);
    if (ALLOWED_ORIGINS.length === 0) return cb(null, true);
    if (ALLOWED_ORIGINS.includes(origin)) return cb(null, true);
    return cb(null, false);
  },
  methods: ["GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization"],
  credentials: false,
  maxAge: 86400,
  optionsSuccessStatus: 204,
};
app.use(cors(corsOptions));
app.options("(.*)", cors(corsOptions));
app.use((req, res, next) => { res.header("Vary", "Origin"); next(); });

// Body parsing
app.use(express.json({ limit: "2mb" }));
app.use(express.urlencoded({ extended: true }));

// Let health & login work even if DB not ready
app.use((req, res, next) => {
  if (req.method === "OPTIONS") return res.sendStatus(204);
  const pass = ["/api/health", "/api/version", "/api/login", "/api/debug/echo", "/api/debug/body"];
  if (!dbReady && req.path.startsWith("/api") && !pass.includes(req.path)) {
    return res.status(503).json({ ok: false, error: "db_not_ready" });
  }
  next();
});

/* ======================= Diagnostics ======================= */
app.get("/api/health", (req, res) => {
  res.json({ ok: true, startedAt, tag: "server.js", version: "login-v4" });
});
app.get("/api/version", (req, res) => res.json({ ok: true, version: "login-v4" }));
app.post("/api/debug/echo", (req, res) => res.json({ ok: true, body: req.body || null }));
app.post("/api/debug/body", (req, res) => {
  const body = req.body;
  res.json({
    ok: true,
    type: typeof body,
    keys: body && typeof body === "object" ? Object.keys(body) : [],
    raw: body ?? null,
  });
});

/* ======================= LOGIN (tolerant) ======================= */
app.post("/api/login", (req, res) => {
  try {
    const body = req.body || {};
    let { username, district, institution, password } = body;

    district = String(district || "").trim();
    institution = String(institution || "").trim();
    password = String(password || "").trim();
    username = String(username || "").trim() || institution;

    if (!district || !institution || !password) {
      return res.status(400).json({
        ok: false,
        error: "missing_fields",
        got: { district: !!district, institution: !!institution, passwordLen: password.length },
      });
    }

    const role = /^dc\s|^doc\s/i.test(institution) ? "DOC" : "USER";
    return res.json({
      ok: true,
      user: { username, district, institution, role, isDoc: role === "DOC" },
      token: "dev-token",
    });
  } catch (e) {
    console.error("login error:", e);
    res.status(500).json({ ok: false, error: "server_error" });
  }
});

/* ======================= Reports ======================= */
// List (filterable)
app.get("/api/reports", async (req, res) => {
  try {
    const { district, institution, month, year } = req.query;
    const q = {};
    if (district) Object.assign(q, ciEq("district", district));
    if (institution) Object.assign(q, ciEq("institution", institution));
    if (month) q.month = normalizeMonth(month);
    if (year) q.year = String(year);

    const docs = await Report.find(q).sort({ year: -1 }).lean();
    const out = docs
      .map(_ensure84OnDoc)
      .sort((a, b) => {
        const y = (parseInt(b.year) || 0) - (parseInt(a.year) || 0);
        if (y !== 0) return y;
        return (FISCAL_MONTHS.indexOf(b.month) ?? -1) - (FISCAL_MONTHS.indexOf(a.month) ?? -1);
      });
    res.json({ ok: true, docs: out });
  } catch (e) {
    console.error("GET /api/reports error:", e);
    res.status(500).json({ ok: false, error: "server_error" });
  }
});

// Get by ID
app.get("/api/reports/:id", async (req, res) => {
  try {
    const doc = await Report.findById(req.params.id).lean();
    if (!doc) return res.status(404).json({ ok: false, error: "not_found" });
    res.json({ ok: true, doc: _ensure84OnDoc(doc) });
  } catch (e) {
    console.error("GET /api/reports/:id error:", e);
    res.status(500).json({ ok: false, error: "server_error" });
  }
});

// Create/Upsert
app.post("/api/reports", async (req, res) => {
  try {
    const { district, institution, month, year, answers = {}, eyeBank, visionCenter } = req.body || {};
    if (!district || !institution || !month || !year) {
      return res.status(400).json({ ok: false, error: "missing_fields" });
    }
    const payload = {
      district: String(district).trim(),
      institution: String(institution).trim(),
      month: normalizeMonth(month),
      year: String(year),
      answers: answers || {},
    };
    if (Array.isArray(eyeBank)) payload.eyeBank = eyeBank;
    if (Array.isArray(visionCenter)) payload.visionCenter = visionCenter;

    const doc = await Report.findOneAndUpdate(
      { district: ciEq("district", payload.district).district,
        institution: ciEq("institution", payload.institution).institution,
        month: payload.month, year: payload.year },
      { $set: payload },
      { upsert: true, new: true, setDefaultsOnInsert: true }
    );
    res.json({ ok: true, doc: _ensure84OnDoc(doc) });
  } catch (e) {
    console.error("POST /api/reports error:", e);
    res.status(500).json({ ok: false, error: "server_error" });
  }
});

/* ========== Aggregated: district → institution-wise (for your UI) ========== */
app.get("/api/district-institution-report", async (req, res) => {
  try {
    const district = String(req.query.district || "").trim();
    const month = normalizeMonth(req.query.month || "");
    const year = String(req.query.year || "");
    if (!district || !month || !year) {
      return res.status(400).json({ ok: false, error: "missing_params" });
    }

    const window = _fiscalWindow(month, year);
    const docs = await Report.find({ ...ciEq("district", district) }).lean();

    // Keep latest doc per institution per month/year
    const keyFor = (inst, m, y) => `${String(inst).trim().toLowerCase()}|${m.toLowerCase()}|${y}`;
    const ts = (d) => Date.parse(d?.updatedAt || d?.createdAt || 0) || 0;
    const latest = new Map();
    for (const d of docs) {
      const k = keyFor(d.institution, d.month, d.year);
      const prev = latest.get(k);
      if (!prev || ts(d) > ts(prev)) latest.set(k, d);
    }

    // Gather display institution names (exclude DOC/DC)
    const instSet = new Set();
    for (const d of docs) {
      const inst = String(d.institution || "").trim();
      if (!inst || /^doc\s|^dc\s/i.test(inst)) continue;
      instSet.add(inst);
    }
    const instNames = Array.from(instSet).sort((a, b) => a.localeCompare(b, undefined, { sensitivity: "base" }));

    // Build rows
    const institutionData = instNames.map((inst) => {
      // monthData = selected month only
      const sel = latest.get(keyFor(inst, month, year));
      const monthData = _answersTo84Array((sel && sel.answers) || {});
      // cumulativeData = sum over window months
      let cumulativeData = new Array(ALL_QUESTION_KEYS.length).fill(0);
      for (const p of window) {
        const d = latest.get(keyFor(inst, p.month, p.year));
        if (d) cumulativeData = _sum84(cumulativeData, _answersTo84Array(d.answers));
      }
      return { institution: inst, monthData, cumulativeData };
    });

    // District totals (sum)
    let districtMonth = new Array(ALL_QUESTION_KEYS.length).fill(0);
    let districtCum = new Array(ALL_QUESTION_KEYS.length).fill(0);
    for (const row of institutionData) {
      districtMonth = _sum84(districtMonth, row.monthData);
      districtCum = _sum84(districtCum, row.cumulativeData);
    }

    return res.json({
      ok: true,
      district,
      month,
      year,
      institutionData,
      districtPerformance: { monthData: districtMonth, cumulativeData: districtCum },
    });
  } catch (e) {
    console.error("GET /api/district-institution-report error:", e);
    res.status(500).json({ ok: false, error: "server_error" });
  }
});

/* ======================= 404 ======================= */
app.use((req, res) => res.status(404).json({ ok: false, error: "route_not_found", path: req.path }));

/* ======================= Start ======================= */
app.listen(PORT, "0.0.0.0", () => {
  console.log(`🚀 API listening on port ${PORT}`);
});
mongoose.connect(MONGO_URI, { dbName: "optometry" })
  .then(() => { dbReady = true; console.log("✅ Mongo connected"); })
  .catch(e => console.error("❌ Mongo connect failed:", e.message));
